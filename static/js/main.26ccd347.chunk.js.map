{"version":3,"sources":["events.js","App.js","registerServiceWorker.js","index.js"],"names":["events","start","moment","toDate","end","title","description","color","App","localizer","momentLocalizer","className","defaultDate","Date","defaultView","showMultiDayTimes","style","height","onSelectEvent","event","alert","handleEvent","eventPropGetter","backgroundColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6RAuCeA,EArCA,CACX,CACIC,MAAOC,IAAO,oBAAqB,qBAAqBC,SACxDC,IAAKF,IAAO,oBAAqB,qBAAqBC,SACtDE,MAAO,8CACPC,YAAa,8EACbC,MAAO,WAEX,CACIN,MAAOC,IAAO,oBAAqB,qBAAqBC,SACxDC,IAAKF,IAAO,oBAAqB,qBAAqBC,SACtDE,MAAO,2DACPC,YAAa,wGACbC,MAAO,WAEX,CACIN,MAAOC,IAAO,oBAAqB,qBAAqBC,SACxDC,IAAKF,IAAO,oBAAqB,qBAAqBC,SACtDE,MAAO,6BACPC,YAAa,8BAEjB,CACIL,MAAOC,IAAO,oBAAqB,qBAAqBC,SACxDC,IAAKF,IAAO,oBAAqB,qBAAqBC,SACtDE,MAAO,sBACPC,YAAa,sBACbC,MAAO,WAEX,CACIN,MAAOC,IAAO,oBAAqB,qBAAqBC,SACxDC,IAAKF,IAAO,oBAAqB,qBAAqBC,SACtDE,MAAO,sBACPC,YAAa,sBACbC,MAAO,Y,YCUAC,MArCf,WACE,IAAMC,EAAYC,YAAgBR,KAMlC,OACE,6BACE,yBAAKS,UAAU,aACX,yBAAKA,UAAU,aACb,gDACmB,uBAAGA,UAAU,oBAEhC,sFAGN,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACEF,UAAWA,EACXG,YAAa,IAAIC,KACjBC,YAAY,QACZd,OAAQA,EACRe,mBAAiB,EACjBC,MAAO,CAAEC,OAAQ,SACjBC,cAAe,SAAAC,GAAK,OAtBR,SAACA,GACnBC,MAAMD,EAAMb,aAqBkBe,CAAYF,IACpCG,gBAAiB,SAAAH,GAAK,MAAK,CACzBH,MAAO,CACLO,gBAAiBJ,EAAMZ,cC1B/BiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,GAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCzCxBkC,K","file":"static/js/main.26ccd347.chunk.js","sourcesContent":["import moment from \"moment\";\n\nconst events = [\n    {\n        start: moment(\"20200702 12:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        end: moment(\"20200702 18:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        title: \"김동은 공부공부\",\n        description: \"고대 컴퓨터 김동은 공부공부\",\n        color: \"#ff8484\"\n    },\n    {\n        start: moment(\"20200703 19:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        end: moment(\"20200704 00:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        title: \"비어퐁&보드게임 빠띠\",\n        description: \"불금 야외 비어퐁과 보드게임 빠띠 놀쟝\",\n        color: \"#3CAEA3\"\n    },\n    {\n        start: moment(\"20200705 11:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        end: moment(\"20200705 14:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        title: \"flutter 스터디\",\n        description: \"flutter 스터디\"\n    },\n    {\n        start: moment(\"20200707 18:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        end: moment(\"20200707 24:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        title: \"탐 타미\",\n        description: \"탐 타미\",\n        color: \"#0066CC\"\n    },\n    {\n        start: moment(\"20200709 18:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        end: moment(\"20200709 24:00:00\", \"YYYYMMDD hh:mm:ss\").toDate(),\n        title: \"탐 타미\",\n        description: \"탐 타미\",\n        color: \"#0066CC\"\n    },\n]\n\nexport default events;\n","import React from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport events from \"./events.js\";\n\nimport \"./App.css\";\nimport \"./style.scss\"\n\nfunction App() {\n  const localizer = momentLocalizer(moment);\n\n  const handleEvent = (event) => {\n    alert(event.description)\n  }\n\n  return (\n    <div>\n      <div className=\"jumbotron\">\n          <div className=\"container\">\n            <h1>\n              Mingles Calendar <i className=\"fa fa-calendar\" />\n            </h1>\n            <p>밍글스 아지트 Upcoming Events</p>\n          </div>\n      </div>\n      <div className=\"examples\">\n        <Calendar\n          localizer={localizer}\n          defaultDate={new Date()}\n          defaultView=\"month\"\n          events={events}\n          showMultiDayTimes\n          style={{ height: \"100vh\" }}\n          onSelectEvent={event => handleEvent(event)}\n          eventPropGetter={event => ({\n            style: {\n              backgroundColor: event.color,\n            },\n          })}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}